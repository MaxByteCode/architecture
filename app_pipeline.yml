trigger:
- main

variables:
  azureSubscription: 'Your Azure Service Connection Name'
  keyVaultName: 'YourKeyVaultName'
  sonarQubeProjectKey: 'YourSonarQubeProjectKey'
  sonarQubeProjectName: 'YourSonarQubeProjectName'
  sonarQubeHost: 'http://your-sonarqube-server'
  appServiceDev: 'your-app-service-name-dev'
  appServiceUat: 'your-app-service-name-uat'
  appServiceProd: 'your-app-service-name-prod'

stages:
- stage: InstallDependencies
  displayName: 'Install Dependencies'
  jobs:
    - job: Install
      displayName: 'Install Dependencies'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '20.9'
            addToPath: true
        - script: |
            npm install
          displayName: 'Install NPM dependencies'

- stage: Lint
  displayName: 'Run Linting'
  jobs:
    - job: Lint
      displayName: 'Run Lint'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - script: |
            npm run lint
          displayName: 'Run Lint'

- stage: SonarQubeAnalysis
  displayName: 'SonarQube Analysis'
  jobs:
    - job: SonarQubeAnalysis
      displayName: 'Run SonarQube Analysis'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: SonarQubePrepare@5
          inputs:
            SonarQube: $(sonarQubeHost)
            scannerMode: 'CLI'
            configMode: 'manual'
            cliProjectKey: $(sonarQubeProjectKey)
            cliProjectName: $(sonarQubeProjectName)
        - script: |
            npm run build
          displayName: 'Build Application for SonarQube Analysis'
        - task: SonarQubeAnalyze@5
        - task: SonarQubePublish@5
          inputs:
            pollingTimeoutSec: '300'

- stage: Build
  displayName: 'Build Application'
  jobs:
    - job: Build
      displayName: 'Build Node.js Application'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - script: |
            npm install
            npm run build
          displayName: 'Install Dependencies and Build Application'
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)'
            Contents: '**/*'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
          displayName: 'Copy files to ArtifactStagingDirectory'

- stage: DeployToDev
  displayName: 'Deploy to Dev'
  jobs:
    - job: DeployDev
      displayName: 'Deploy to Dev Environment'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureKeyVault@2
          inputs:
            connectedServiceName: $(azureSubscription)
            keyVaultName: $(keyVaultName)
            secretsFilter: '*'
          displayName: 'Fetch secrets from KeyVault'
        - task: AzureWebApp@1
          inputs:
            appName: $(appServiceDev)
            package: '$(Build.ArtifactStagingDirectory)/**/*.zip'
            azureSubscription: $(azureSubscription)
            deploymentMethod: 'auto'
          displayName: 'Deploy to Azure App Service (Dev)'

- stage: DeployToUat
  displayName: 'Deploy to UAT'
  dependsOn: DeployToDev
  condition: succeeded()
  jobs:
    - job: DeployUat
      displayName: 'Deploy to UAT Environment'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureKeyVault@2
          inputs:
            connectedServiceName: $(azureSubscription)
            keyVaultName: $(keyVaultName)
            secretsFilter: '*'
          displayName: 'Fetch secrets from KeyVault'
        - task: AzureWebApp@1
          inputs:
            appName: $(appServiceUat)
            package: '$(Build.ArtifactStagingDirectory)/**/*.zip'
            azureSubscription: $(azureSubscription)
            deploymentMethod: 'auto'
          displayName: 'Deploy to Azure App Service (UAT)'

- stage: DeployToProd
  displayName: 'Deploy to Production'
  dependsOn: DeployToUat
  condition: succeeded()
  jobs:
    - job: DeployProd
      displayName: 'Deploy to Production Environment'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureKeyVault@2
          inputs:
            connectedServiceName: $(azureSubscription)
            keyVaultName: $(keyVaultName)
            secretsFilter: '*'
          displayName: 'Fetch secrets from KeyVault'
        - task: AzureWebApp@1
          inputs:
            appName: $(appServiceProd)
            package: '$(Build.ArtifactStagingDirectory)/**/*.zip'
            azureSubscription: $(azureSubscription)
            deploymentMethod: 'auto'
          displayName: 'Deploy to Azure App Service (Production)'

